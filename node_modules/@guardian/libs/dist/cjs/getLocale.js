"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocale = exports.__resetCachedValue = void 0;
const isString_1 = require("./isString");
const storage_1 = require("./storage");
const KEY = 'gu.geolocation';
const URL = 'https://api.nextgen.guardianapps.co.uk/geolocation';
// best guess that we have a valid code, without actually shipping the entire list
const isValidCountryCode = (country) => isString_1.isString(country) && /^[A-Z]{2}$/.test(country);
const daysFromNow = (days) => new Date().getTime() + 60 * 60 * 24 * days;
// we'll cache any successful lookups so we only have to do this once
let locale;
// just used for tests
const __resetCachedValue = () => (locale = void 0);
exports.__resetCachedValue = __resetCachedValue;
/**
 * Fetches the user's current location as an ISO 3166-1 alpha-2 string e.g. 'GB', 'AU' etc
 */
const getLocale = async () => {
    if (locale)
        return locale;
    const stored = storage_1.storage.local.get(KEY);
    // if we've got a locale, return it
    if (isValidCountryCode(stored))
        return (locale = stored);
    // use our API to get one
    try {
        const { country } = (await fetch(URL).then((response) => response.json()));
        if (isValidCountryCode(country)) {
            // save it for 10 days
            storage_1.storage.local.set(KEY, country, daysFromNow(10));
            // return it
            return (locale = country);
        }
    }
    catch (e) {
        // do nothing
    }
    return null;
};
exports.getLocale = getLocale;
