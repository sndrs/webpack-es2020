"use strict";
/**
 *
 * Handles team-based logging to the browser console
 *
 * Prevents a proliferation of console.log in client-side
 * code.
 *
 * Subscribing to logs relies on LocalStorage
 */
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports._ = exports.log = exports.debug = void 0;
const logger_teams_1 = require("./logger.teams");
const storage_1 = require("./storage");
const KEY = 'gu.logger';
const teamColours = logger_teams_1.teams;
const style = (team) => {
    const { background, font } = teamColours[team];
    return `background: ${background}; color: ${font}; padding: 2px; border-radius:3px`;
};
/**
 * Only logs in dev environments.
 */
const debug = (team, ...args) => {
    const isDevEnv = window.location.host.includes('localhost') ||
        window.location.host.endsWith('thegulocal.com') ||
        window.location.host.endsWith('.dev-theguardian.com');
    if (isDevEnv)
        exports.log(team, ...args);
};
exports.debug = debug;
/**
 * Runs in all environments, if local storage values are set.
 */
const log = (team, ...args) => {
    // TODO add check for localStorage
    if (!(storage_1.storage.local.get(KEY) || '').includes(team))
        return;
    const styles = [style('common'), '', style(team), ''];
    console.log(`%c@guardian%c %c${team}%c`, ...styles, ...args);
};
exports.log = log;
/**
 * Subscribe to a teamâ€™s log
 * @param team the teamâ€™s unique ID
 */
const subscribeTo = (team) => {
    const teamSubscriptions = storage_1.storage.local.get(KEY)
        ? storage_1.storage.local.get(KEY).split(',')
        : [];
    teamSubscriptions.push(team);
    storage_1.storage.local.set(KEY, teamSubscriptions.join(','));
    exports.log(team, 'ðŸ”” Subscribed, hello!');
};
/**
 * Unsubscribe to a teamâ€™s log
 * @param team the teamâ€™s unique ID
 */
const unsubscribeFrom = (team) => {
    exports.log(team, 'ðŸ”• Unsubscribed, good-bye!');
    const teamSubscriptions = storage_1.storage.local.get(KEY)
        .split(',')
        .filter((t) => t !== team);
    storage_1.storage.local.set(KEY, teamSubscriptions.join(','));
};
if (typeof window !== 'undefined') {
    window.guardian || (window.guardian = {});
    (_a = window.guardian).logger || (_a.logger = {
        subscribeTo,
        unsubscribeFrom,
        teams: () => Object.keys(teamColours),
    });
}
exports._ = {
    teamColours,
    KEY,
};
