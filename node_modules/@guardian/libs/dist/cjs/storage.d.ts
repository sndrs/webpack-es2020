declare class StorageFactory {
    #private;
    constructor(storage: Storage);
    /**
     * Check whether storage is available.
     */
    isAvailable(): boolean;
    /**
     * Retrieve an item from storage.
     *
     * @param key - the name of the item
     */
    get(key: string): any;
    /**
     * Save a value to storage.
     *
     * @param key - the name of the item
     * @param value - the data to save
     * @param expires - optional date on which this data will expire
     */
    set(key: string, value: unknown, expires?: string | number | Date): void;
    /**
     * Remove an item from storage.
     *
     * @param key - the name of the item
     */
    remove(key: string): void;
    /**
     * Removes all items from storage.
     */
    clear(): void;
    /**
     * Retrieve an item from storage in its raw state.
     *
     * @param key - the name of the item
     */
    getRaw(key: string): string | null;
    /**
     * Save a raw value to storage.
     *
     * @param key - the name of the item
     * @param value - the data to save
     */
    setRaw(key: string, value: string): void;
}
/**
 * Manages using `localStorage` and `sessionStorage`.
 *
 * Has a few advantages over the native API, including
 * - failing gracefully if storage is not available
 * - you can save and retrieve any JSONable data
 *
 * All methods are available for both `localStorage` and `sessionStorage`.
 */
export declare const storage: {
    "__#2@#local": StorageFactory | undefined;
    "__#2@#session": StorageFactory | undefined;
    readonly local: StorageFactory;
    readonly session: StorageFactory;
};
export {};
